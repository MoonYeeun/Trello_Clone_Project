{"ast":null,"code":"var _jsxFileName = \"/Users/yeeun/Trello/trello/src/Components/TrelloCard.js\";\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport Textarea from 'react-textarea-autosize';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport './Trello.css';\nimport TodoModal from './TodoModal';\nimport Modal from './Modal';\n\nconst TrelloCard = ({\n  text,\n  body\n}) => {\n  const [modal, setModal] = useState(false); // 현재 state, 이 값을 업데이트 하는 함수\n\n  const [isEdit, setEdit] = useState(false); // 현재 state, 이 값을 업데이트 하는 함수\n\n  const [edit, setUpdate] = useState('');\n\n  const handleModal = () => {\n    setModal(!modal);\n  }; // 수정 창 띄우기 \n\n\n  const editMode = () => {\n    const titleText = text;\n\n    const handleTitleUpdate = ({\n      target\n    }) => {\n      setUpdate(target.value);\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: styles.Card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Textarea, {\n      style: styles.Textarea,\n      placeholder: titleText,\n      autoFocus: true,\n      value: text,\n      onChange: handleTitleUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.formButtonGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: styles.Button,\n      variant: \"contained\",\n      onClick: () => {\n        setEdit(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, \"SAVE\"), /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, \"close\")));\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    style: styles.CardContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, isEdit ? /*#__PURE__*/React.createElement(CardContent, {\n    className: \"todo-text\",\n    onClick: () => handleModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, text)) : editMode(), modal && /*#__PURE__*/React.createElement(Modal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TodoModal, {\n    handleModal: handleModal,\n    title: text,\n    body: body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"update\",\n    onClick: setEdit(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"\\u270E\")));\n};\n\nconst styles = {\n  CardContainer: {\n    marginBottom: 10\n  }\n};\nexport default TrelloCard;","map":{"version":3,"sources":["/Users/yeeun/Trello/trello/src/Components/TrelloCard.js"],"names":["React","useState","Card","Icon","Button","Textarea","Typography","CardContent","TodoModal","Modal","TrelloCard","text","body","modal","setModal","isEdit","setEdit","edit","setUpdate","handleModal","editMode","titleText","handleTitleUpdate","target","value","styles","formButtonGroup","CardContainer","marginBottom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAO,cAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAoB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,KAAD,CAAlC,CADmC,CACQ;;AAC3C,QAAM,CAACc,MAAD,EAASC,OAAT,IAAoBf,QAAQ,CAAC,KAAD,CAAlC,CAFmC,CAEQ;;AAC3C,QAAM,CAACgB,IAAD,EAAOC,SAAP,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMkB,WAAW,GAAG,MAAM;AACtBL,IAAAA,QAAQ,CAAC,CAACD,KAAF,CAAR;AACH,GAFD,CALmC,CASnC;;;AACA,QAAMO,QAAQ,GAAG,MAAM;AACnB,UAAMC,SAAS,GAAGV,IAAlB;;AAEA,UAAMW,iBAAiB,GAAG,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAc;AACpCL,MAAAA,SAAS,CAACK,MAAM,CAACC,KAAR,CAAT;AACH,KAFD;;AAIA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACvB,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEuB,MAAM,CAACpB,QAAxB;AAAkC,MAAA,WAAW,EAAEgB,SAA/C;AACA,MAAA,SAAS,MADT;AACU,MAAA,KAAK,EAAEV,IADjB;AAEA,MAAA,QAAQ,EAAEW,iBAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAMI;AAAK,MAAA,KAAK,EAAEG,MAAM,CAACC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAED,MAAM,CAACrB,MAAtB;AAA8B,MAAA,OAAO,EAAC,WAAtC;AACA,MAAA,OAAO,EAAE,MAAM;AAACY,QAAAA,OAAO,CAAC,KAAD,CAAP;AAAe,OAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALJ,CANJ,CADJ;AAgBH,GAvBD;;AAyBA,sBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAIS,MAAM,CAACE,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQZ,MAAM,gBACN,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,WAAvB;AAAmC,IAAA,OAAO,EAAE,MAAMI,WAAW,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,YAAY,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BR,IAA1B,CADJ,CADM,GAIJS,QAAQ,EANlB,EAYQP,KAAK,iBACD,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAEM,WAAxB;AAAqC,IAAA,KAAK,EAAER,IAA5C;AAAkD,IAAA,IAAI,EAAEC,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAbZ,eAkBI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAwB,IAAA,OAAO,EAAEI,OAAO,CAAC,IAAD,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBJ,CADJ,CADJ;AAwBH,CA3DD;;AA6DA,MAAMS,MAAM,GAAG;AACXE,EAAAA,aAAa,EAAE;AACXC,IAAAA,YAAY,EAAE;AADH;AADJ,CAAf;AAKA,eAAelB,UAAf","sourcesContent":["import React, { useState } from 'react'; \nimport Card from '@material-ui/core/Card'; \nimport Icon from '@material-ui/core/Icon'\nimport Button from '@material-ui/core/Button'\nimport Textarea from 'react-textarea-autosize'\nimport Typography from '@material-ui/core/Typography'; \nimport CardContent from '@material-ui/core/CardContent';\nimport './Trello.css';\nimport TodoModal from './TodoModal';\nimport Modal from './Modal';\n\nconst TrelloCard = ({ text, body }) => {\n    const [modal, setModal] = useState(false); // 현재 state, 이 값을 업데이트 하는 함수\n    const [isEdit, setEdit] = useState(false); // 현재 state, 이 값을 업데이트 하는 함수\n    const [edit, setUpdate] = useState(''); \n\n    const handleModal = () => {\n        setModal(!modal)\n    }\n\n    // 수정 창 띄우기 \n    const editMode = () => {\n        const titleText = text;\n\n        const handleTitleUpdate = ({target}) => {\n            setUpdate(target.value)\n        }\n\n        return ( \n            <div> \n                <Card style={styles.Card}> \n                    <Textarea style={styles.Textarea} placeholder={titleText} \n                    autoFocus value={text}\n                    onChange={handleTitleUpdate}/> \n                </Card> \n                <div style={styles.formButtonGroup}> \n                    <Button style={styles.Button} variant=\"contained\"\n                    onClick={() => {setEdit(false)}}>\n                        SAVE\n                    </Button> \n                    <Icon>close</Icon> \n                </div> \n            </div>\n        );\n    } \n\n    return (\n        <Card style = {styles.CardContainer}>\n            <div className=\"todo-item\">\n                {\n                    isEdit ? \n                    <CardContent className=\"todo-text\" onClick={() => handleModal()}>\n                        <Typography gutterBottom>{text}</Typography>\n                    </CardContent>\n                    : editMode()\n                }\n                {/* <CardContent className=\"todo-text\" onClick={() => handleModal()}>\n                    <Typography gutterBottom>{text}</Typography>\n                </CardContent> */}\n                {\n                    modal && (\n                        <Modal>\n                            <TodoModal handleModal={handleModal} title={text} body={body}></TodoModal>\n                        </Modal>\n                    )\n                }\n                <div className=\"update\" onClick={setEdit(true)}>&#9998;</div> \n            </div>\n        </Card>\n    )\n}\n\nconst styles = {\n    CardContainer: {\n        marginBottom: 10\n    }\n}\nexport default TrelloCard;"]},"metadata":{},"sourceType":"module"}