{"ast":null,"code":"var _jsxFileName = \"/Users/yeeun/Trello/trello/src/Components/TrelloActionButton.js\";\nimport React, { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport Textarea from 'react-textarea-autosize';\nimport { addList, addCard } from '../actions';\nimport { useDispatch } from 'react-redux';\n/*\nHook은 함수 컴포넌트에서 React state와 생명주기 기능(lifecycle features)을 \n“연동(hook into)“할 수 있게 해주는 함수\n\nHook은 계층 변화 없이 상태 관련 로직을 재사용할 수 있도록 도와준다.\nHook을 통해 로직에 기반을 둔 작은 함수로 컴포넌트를 나눌 수 있다. \n(구독 설정 및 데이터를 불러오는 것과 같은 로직)\n*/\n\nconst TrelloActionButton = ({\n  list,\n  listID\n}) => {\n  const [state, setState] = useState(false); // 현재 state, 이 값을 업데이트 하는 함수\n\n  const [text, setText] = useState(''); // card 에 입력한 text\n\n  const dispatch = useDispatch(); // 새로운 trello list 만들기\n\n  const renderForm = () => {\n    const placeholder = list ? \"Enter list title...\" : \"Enter a title for this card...\";\n    const buttonTitle = list ? \"Add List\" : \"Add Card\";\n\n    const handleInputChange = ({\n      target\n    }) => {\n      setText(target.value);\n    };\n\n    const handleAddList = () => {\n      if (text) {\n        dispatch(addList(text));\n      }\n\n      return;\n    };\n\n    const handleAddCard = () => {\n      if (text) {\n        dispatch(addCard(listID, text));\n      }\n\n      return;\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: styles.Card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Textarea, {\n      style: styles.Textarea,\n      placeholder: placeholder,\n      autoFocus: true,\n      value: text,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.formButtonGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: styles.Button,\n      variant: \"contained\" // textbox 이외의 공간 클릭 시 창 닫는다.\n      ,\n      onBlur: () => {\n        setState(false);\n      } //onClick 의 경우 onBlur 후에 작동 -> 창 이미 닫힘\n      //onMouseDown 의 경우 onBlur 보다 먼저 작동\n      // props로 list가 들어오면 list를 아니면 card 추가하기 \n      ,\n      onMouseDown: list ? handleAddList : handleAddCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, buttonTitle), /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, \"close\")));\n  }; // 새로운 trello card 만들기 \n\n\n  const renderAddbutton = () => {\n    const buttonText = list ? 'Add another list' : 'Add another Card';\n    const buttonTextOpacity = list ? 1 : 0.5;\n    const buttonTextColor = list ? \"white\" : \"inherit\";\n    const buttonTextBackgroud = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => {\n        setState(true);\n      },\n      style: { ...styles.openFormButtonGroup,\n        opacity: buttonTextOpacity,\n        color: buttonTextColor,\n        backgroundColor: buttonTextBackgroud\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, \"add\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, buttonText), \" \");\n  };\n\n  return (// true 이면 카드 생성 false 이면 list 생성\n    state ? renderForm() : renderAddbutton()\n  );\n};\n\nconst styles = {\n  openFormButtonGroup: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    borderRadius: 3,\n    height: 36,\n    width: 272,\n    paddingLeft: 10\n  },\n  Card: {\n    overflow: \"visible\",\n    minHeight: 80,\n    minWidth: 272,\n    padding: \"6px 8px 2px\"\n  },\n  Textarea: {\n    resize: \"none\",\n    overflow: \"hidden\",\n    outline: \"none\",\n    border: \"none\",\n    width: \"100%\"\n  },\n  Button: {\n    color: \"white\",\n    backgroundColor: \"#5aac44\",\n    marginBottom: 10\n  },\n  Icon: {\n    marginLeft: 8,\n    cursor: \"pointer\"\n  },\n  formButtonGroup: {\n    marginTop: 8,\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n};\nexport default TrelloActionButton;","map":{"version":3,"sources":["/Users/yeeun/Trello/trello/src/Components/TrelloActionButton.js"],"names":["React","useState","Card","Icon","Button","Textarea","addList","addCard","useDispatch","TrelloActionButton","list","listID","state","setState","text","setText","dispatch","renderForm","placeholder","buttonTitle","handleInputChange","target","value","handleAddList","handleAddCard","styles","formButtonGroup","renderAddbutton","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackgroud","openFormButtonGroup","opacity","color","backgroundColor","display","alignItems","cursor","borderRadius","height","width","paddingLeft","overflow","minHeight","minWidth","padding","resize","outline","border","marginBottom","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react' \nimport Card from '@material-ui/core/Card'\nimport Icon from '@material-ui/core/Icon'\nimport Button from '@material-ui/core/Button'\nimport Textarea from 'react-textarea-autosize'\nimport { addList, addCard } from '../actions'\nimport { useDispatch } from 'react-redux';\n\n\n/*\nHook은 함수 컴포넌트에서 React state와 생명주기 기능(lifecycle features)을 \n“연동(hook into)“할 수 있게 해주는 함수\n\nHook은 계층 변화 없이 상태 관련 로직을 재사용할 수 있도록 도와준다.\nHook을 통해 로직에 기반을 둔 작은 함수로 컴포넌트를 나눌 수 있다. \n(구독 설정 및 데이터를 불러오는 것과 같은 로직)\n*/\nconst TrelloActionButton = ({list, listID}) => {\n\n    const [state, setState] = useState(false); // 현재 state, 이 값을 업데이트 하는 함수\n    const [text, setText] = useState(''); // card 에 입력한 text\n    const dispatch = useDispatch()\n\n    // 새로운 trello list 만들기\n    const renderForm = () => {\n        const placeholder = list ? \"Enter list title...\" : \"Enter a title for this card...\" \n        const buttonTitle = list ? \"Add List\" : \"Add Card\"\n\n        const handleInputChange = ({target}) => {\n            setText(target.value)\n        }\n        const handleAddList = () => {\n            if(text) {\n                dispatch(addList(text))\n            }\n            return;\n        }\n        \n        const handleAddCard = () => {\n            if(text) {\n                dispatch(addCard(listID, text))\n            }\n            return;\n        }\n\n        return (\n            <div> \n                <Card style={styles.Card}> \n                    <Textarea style={styles.Textarea} placeholder={placeholder} \n                    autoFocus value={text}\n                    onChange={handleInputChange}/> \n                </Card> \n                <div style={styles.formButtonGroup}> \n                    <Button style={styles.Button} variant=\"contained\"\n                    // textbox 이외의 공간 클릭 시 창 닫는다.\n                    onBlur={()=>{setState(false)}}\n                    //onClick 의 경우 onBlur 후에 작동 -> 창 이미 닫힘\n                    //onMouseDown 의 경우 onBlur 보다 먼저 작동\n                    // props로 list가 들어오면 list를 아니면 card 추가하기 \n                    onMouseDown={list ? handleAddList : handleAddCard}>\n                        {buttonTitle}\n                    </Button> \n                    <Icon>close</Icon> \n                </div> \n            </div>\n        )\n    }\n    // 새로운 trello card 만들기 \n    const renderAddbutton = () => {\n        const buttonText = list ? 'Add another list' : 'Add another Card';\n        const buttonTextOpacity = list ? 1 : 0.5 \n        const buttonTextColor = list ? \"white\" : \"inherit\" \n        const buttonTextBackgroud = list ? \"rgba(0,0,0,.15)\" : \"inherit\"\n\n        return ( \n            <div onClick={() => {setState(true)}} style={{ \n                ...styles.openFormButtonGroup, \n                opacity:buttonTextOpacity, \n                color:buttonTextColor, \n                backgroundColor:buttonTextBackgroud}}> \n                <Icon>add</Icon> \n                <p>{buttonText}</p> </div> \n        );\n    } \n\n    return (\n        // true 이면 카드 생성 false 이면 list 생성\n        state ? renderForm() : renderAddbutton()\n    )\n}\nconst styles = { \n    openFormButtonGroup:{ \n        display:\"flex\", \n        alignItems:\"center\", \n        cursor:\"pointer\", \n        borderRadius:3, \n        height:36, \n        width:272, \n        paddingLeft:10 \n    }, \n    Card: {\n        overflow:\"visible\", \n        minHeight:80, \n        minWidth:272, \n        padding:\"6px 8px 2px\"\n    },\n    Textarea: { \n        resize:\"none\", \n        overflow:\"hidden\", \n        outline:\"none\", \n        border:\"none\", \n        width:\"100%\" \n    }, \n    Button: {\n        color:\"white\", \n        backgroundColor: \"#5aac44\",\n        marginBottom: 10\n    },\n    Icon: {\n        marginLeft:8, \n        cursor:\"pointer\"\n    },\n    formButtonGroup:{ \n        marginTop:8, \n        display:\"flex\", \n        alignItems:\"center\" \n    }\n}\n\nexport default TrelloActionButton;"]},"metadata":{},"sourceType":"module"}